/**
 * 2的个数
 * 请编写一个方法，输出0到n(包括n)中数字2出现了几次。
 * 给定一个正整数n，请返回0到n的数字中2出现了几次。
 *
 * 测试样例：
 * 10
 * 返回：
 * 1
 */

/**
 * 思路：
 *
 * 如果当前位<2，则此时2的个数为高位*flag
 *
 * 如果当前位=2，则此时2的个数为高位*flag+低位+1【0到低位共低位+1个数】
 *
 * 如果当前位>2，则此时2的个数为(高位+1)*flag
 *
 * 注：分析的时候有一点注意：是单独的某一位是2，例如百位为2，千位为2，不一起考虑同时为2；
 * 只单独看某一位为2时的个数
 *
 * 例：
 *
 * 211计算个位数为2时2的个数，个位数为1，则个位数为2的数有：202、192、182、...、92、82、...、12、2
 * 共21个数【高位21*1】
 *
 * 计算十位数为2时2的个数，十位数为1，则十位数为2的数有：129、128、...、120、29、28、...、21、20
 * 共20个数【高位2*10】
 *
 * 3211计算百位数为2时2的个数，百位数为2，则百位数为2的数有：200~299【共100个数】、1200~1299【共100
 * 个数】、2200~2299【共100个数】、3200~3211【共12个数】共3*100+12个数由于当前位等于2，所以最高位为
 * 3，当前位为2时2的个数需要单独算
 *
 * 2311计算百位数为2时2的个数，百位数为3，则百位数为2的数有：200~299【共100个数】、1200~1299【共100个
 * 数】、2200~2299【共100个数】共(2+1)*100个数由于当前位大于2，所以可以再多加一次
 */

public class Count2 {
    public int countNumberOf2s(int n) {
        int count = 0; //计算2的总个数  以12209为例，计算百位数时2的个数
        int low = 0; //计算低位  此时低位为09
        int current = 0; //计算当前位 此时当前位为2
        int high = 0; //计算高位  此时高位为12
        int flag = 1; //标记此时是个位数1、十位数10还是百位数100    此时flag为100
        while (n / flag != 0) {  //n=12209  计算百位  则low为十位数个位数    current为百位数   high为百位数前面的数
            low = n - (n / flag) * flag;  //12209-(12209/100)*100=12209-12200*100=12209-12200=09
            current = (n / flag) % 10;    //(12209/100)%10=122%10=2
            high = (n / flag) / 10;       //(12209/100)/10=122/10=12
            if (current == 1 || current == 0) {  //当前位 < 2的情况
                count += high * flag;  //高位*flag
            } else if (current == 2) {  //当前位 = 2的情况
                count += high * flag + low + 1;
            } else {  //当前位 > 2的情况
                count += (high + 1) * flag;
            }
            flag *= 10;

        }
        return count;
    }
}
